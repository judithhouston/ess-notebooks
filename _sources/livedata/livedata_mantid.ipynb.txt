{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Live-Data using Mantid\n",
    "\n",
    "Demonstrates consuming data from Kafka with Mantid.\n",
    "\n",
    "Use in conjunction with a source of schema id `ev42` data, such as the [NeXus Streamer](https://github.com/ess-dmsc/nexus-streamer).\n",
    "\n",
    "The functions of \"ProcessingScript\" and \"PostProcessingScript\" are shown in the following diagram (from Mantid `LoadLiveData` algorithm documentation:\n",
    "\n",
    "![LoadLiveData](LoadLiveData_flow.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%writefile process.py\n",
    "\n",
    "rebin_params = '0,10000,100000'\n",
    "mtd[output] = Rebin(input, Params=rebin_params, PreserveEvents=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%writefile postprocess.py\n",
    "\n",
    "# We don't actually need to do anything to the data that ends up in the output Mantid workspace\n",
    "mtd[output] = input\n",
    "\n",
    "# We can do something with scipp here, but the notebook is not in scope: we can't update plots in the notebook..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temporarily setting facility to TEST_LIVE from ISIS\n",
      "Starting to consume data from Kafka\n",
      "Completed consumption of data from Kafka\n",
      "Set facility back to original setting of ISIS\n",
      "test is an Workspace2D\n",
      "number of histograms = 4\n",
      "number of bins = 10\n",
      "run number = 1\n"
     ]
    }
   ],
   "source": [
    "from mantid.simpleapi import *\n",
    "import mantid.api as api\n",
    "from time import sleep\n",
    "\n",
    "original_facility = ConfigService.getFacility().name()\n",
    "ConfigService.setFacility(\"TEST_LIVE\")\n",
    "print(f\"Temporarily setting facility to {ConfigService.getFacility().name()} from {original_facility}\")\n",
    "\n",
    "output_ws_name = \"test\"\n",
    "try:\n",
    "    print(\"Starting to consume data from Kafka\")\n",
    "    StartLiveData(Instrument=\"ISIS_Kafka_Event\", OutputWorkspace=output_ws_name, AccumulationWorkspace=\"accum\",\n",
    "                  FromNow=False, FromStartOfRun=True, FromTime=False, Listener=\"KafkaEventListener\",\n",
    "                  Address=\"localhost:9092\", UpdateEvery=5.,\n",
    "                  AccumulationMethod=\"Add\", PreserveEvents=True,\n",
    "                  RunTransitionBehavior=\"Stop\", ProcessingScriptFilename=\"process.py\",\n",
    "                  PostProcessingScriptFilename=\"postprocess.py\")\n",
    "\n",
    "    try:\n",
    "        sleep(5)\n",
    "        monitorLiveDataHandle = api.AlgorithmManagerImpl.Instance().runningInstancesOf(\"MonitorLiveData\")[0]\n",
    "        while monitorLiveDataHandle.isRunning():\n",
    "            sleep(1)\n",
    "    except IndexError:\n",
    "        # maybe already finished?\n",
    "        pass\n",
    "\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "finally:\n",
    "    print(\"Completed consumption of data from Kafka\")\n",
    "    ConfigService.setFacility(original_facility)\n",
    "    print(f\"Set facility back to original setting of {ConfigService.getFacility().name()}\")\n",
    "\n",
    "ws_out = mtd[output_ws_name]\n",
    "\n",
    "print(f\"{ws_out.name()} is an {ws_out.id()}\")\n",
    "print(f\"number of histograms = {ws_out.getNumberHistograms()}\")\n",
    "print(f\"number of bins = {ws_out.blocksize()}\")\n",
    "print(f\"run number = {ws_out.getRunNumber()}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
