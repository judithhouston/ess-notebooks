trigger:
  branches:
    exclude:
      - '*'

pr:
  autoCancel: true
  branches:
    include:
      - '*'

variables:
  is_release: $[eq(variables['System.PullRequest.TargetBranch'], 'release')]
  target_branch: $[variables['System.PullRequest.TargetBranch']]

stages:
  - stage: 'notebook_tests'
    displayName: 'notebook tests'

    jobs:
      - job: 'test_notebooks'
        displayName: 'test notebooks linux'
        timeoutInMinutes: 30
        pool:
          vmImage: 'ubuntu-18.04'
        variables:
          test_output: 'notebooks.xml'
        steps:
          - checkout: self
            submodules: true
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: 'add conda to PATH'
          - bash: |
             set -ex
             echo is master $(is_release)
             echo target branch $(System.PullRequest.TargetBranch)
             conda config --set always_yes yes --set changeps1 no
             if [ $(is_release) == False ]; then
                 conda env create -f ess-notebook-latest.yml
                 source activate ess-notebook-latest
             else
                 conda env create -f ess-notebook.yml
                 source activate ess-notebook
             fi
             git clone https://github.com/scipp/ess-notebooks-data.git data
             python make_config.py ${PWD}/data
             mkdir tests
             cp dataconfig.py tests/
             find . -not -path "*/\.*" -type f -name "*.ipynb"\
              | xargs jupyter nbconvert --to python --output-dir tests\
              --RegexRemovePreprocessor.patterns="['^# exclude-from-export']"
             touch $(test_output)
             echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"suite\">" >> $(test_output)
             exclude_list=()
             for f in tests/*.py; do 
                 found=0
                 for g in "${exclude_list[@]}" ; do
                     [ "$f" = "tests/$g" ] && found=1
                 done
                 [ "$found" = 0 ] && python "$f"
                 echo "<testcase classname=\"class\" name=\"$f\"><failure message=\"$f failed\"/></testcase>" >> $(test_output)
             done
             echo "</testsuite></testsuites>" >> $(test_output)
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: "**/$(test_output)"
              failTaskOnFailedTests: true
            displayName: 'Publish notebook test results'
            condition: succeededOrFailed()
